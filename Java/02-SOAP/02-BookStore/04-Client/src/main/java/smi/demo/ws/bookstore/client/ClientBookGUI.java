package smi.demo.ws.bookstore.client;

import smi.demo.ws.bookstore.proxy.Book;
import smi.demo.ws.bookstore.proxy.ServiceBookStore_Service;
import smi.demo.ws.bookstore.proxy.ServiceBookStore;

import java.awt.Image;
import java.io.File;
import java.net.URL;

import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.xml.ws.soap.MTOMFeature;

public class ClientBookGUI extends javax.swing.JFrame {
	private final String baseTitle = "Book Library Client";
	
	private String configDirectory;

	private DefaultListModel<String> model;
	
	private ServiceBookStore port;
  
	private void handleException(Exception ex) {
		StringBuilder sBuilder;
		sBuilder = new StringBuilder();

		sBuilder.append( ex.getMessage() );
		for (StackTraceElement stackTraceElement : ex.getStackTrace()) {
			sBuilder.append( "\r\n" );
			sBuilder.append( stackTraceElement.toString() );
		}
		JOptionPane.showMessageDialog(
			this, 
			sBuilder.toString(), 
			ex.getMessage(), 
			JOptionPane.ERROR_MESSAGE );
	}
  
	private void preInit(String configDirectory) {
		this.configDirectory = configDirectory;
		this.model = new DefaultListModel<>();
	}
  
	private void postInit() {
		try {
			this.setVisible( true );
			
			File file;
			file = new File( this.configDirectory, "services.xml" );

			ServiceLocations locations;
			locations = ServiceLocations.load( file.getAbsolutePath() );

			this.jComboBoxAvailableServices.removeAllItems();

			for (String currentLocation : locations.getLocations() ) {
				this.jComboBoxAvailableServices.addItem( currentLocation );
			}
		}
		catch (Exception ex) {
			handleException( ex );
		}
	}
  
	private DefaultListModel<String> getModel() {
		return this.model;
	}
  
	
  
	private void handleInitService() {
		try {
			ServiceBookStore_Service service;
			service = new ServiceBookStore_Service( new URL( this.jTextFieldServiceLocation.getText() ) );
      
			// Enable MTOM for messages larger than 50 Kbyte
			this.port = service.getServiceBookStorePort( new MTOMFeature( true, 50*1024 ) );
			//this.port = service.getServiceBookStorePort();
            
			this.jButtonRefresh.setEnabled( true );
      
			String title;
			title = String.format( "%s - %s", this.baseTitle, this.port.getStoreName() );
			this.setTitle( title );
		}
		catch (Exception ex) {
			this.jButtonRefresh.setEnabled( false );
			handleException( ex );
		}
	}
  
	private void handleLocationChange() {
		String currentLocation;
		currentLocation = (String)this.jComboBoxAvailableServices.getSelectedItem();

		this.jTextFieldServiceLocation.setText( currentLocation );
	}

	private void handleRefreshBookList() {
		try {
			this.getModel().removeAllElements();

			for(String currentTitle : this.port.getBookTitles() ) {
				this.getModel().addElement(currentTitle);
			}
		}
		catch (Exception ex) {
			handleException( ex );
		}
	}
  
	private void handleBookSelection() {
		try {
			if ( this.jListAvailableBooks.getValueIsAdjusting()==true ) {
				return;
			}

			String selectedBookTitle;
			selectedBookTitle = this.jListAvailableBooks.getSelectedValue();
			if ( selectedBookTitle==null ) {
				return;
			}
      
			Book book;
			book = this.port.getBookByTitle(selectedBookTitle);
      
			this.jTextFieldISBN.setText( book.getIsbn() );
			this.jTextFieldPrice.setText( "" + book.getPrice() );
			this.jTextFieldQuantity.setText( "" + book.getQuantity() );

			byte[] bookCover;
			bookCover = this.port.getBookCover( book.getIsbn() );

			ImageIcon imageAsIcon;
			imageAsIcon = new ImageIcon( bookCover );

			int imageWidth, imageHeight;
			imageWidth = imageAsIcon.getIconWidth();
			imageHeight = imageAsIcon.getIconHeight();

			int scaledImageWidth, scaledImageHeight;
			//scaledImageHeight = this.jLabelCoverImage.getBounds().height;
			scaledImageHeight = 250;

			double ratio = (double)scaledImageHeight / (double)imageHeight;
			scaledImageWidth = (int)(imageWidth * ratio);

			Image image;
			image = imageAsIcon.getImage().getScaledInstance( scaledImageWidth, scaledImageHeight, Image.SCALE_DEFAULT );

			this.jLabelCoverImage.setIcon( new ImageIcon( image ) );
		}
		catch (Exception ex) {
			handleException( ex );
		}
	}

	public ClientBookGUI(String configDirectory) {
		preInit( configDirectory );

		initComponents();

		postInit();
	}

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabelAvailableBooks = new javax.swing.JLabel();
    jButtonRefresh = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    jListAvailableBooks = new javax.swing.JList<>();
    jLabelPrice = new javax.swing.JLabel();
    jLabelISBN = new javax.swing.JLabel();
    jLabelQuantity = new javax.swing.JLabel();
    jTextFieldQuantity = new javax.swing.JTextField();
    jTextFieldPrice = new javax.swing.JTextField();
    jTextFieldISBN = new javax.swing.JTextField();
    jLabelCover = new javax.swing.JLabel();
    jLabelCoverImage = new javax.swing.JLabel();
    jLabelServiceLocation = new javax.swing.JLabel();
    jTextFieldServiceLocation = new javax.swing.JTextField();
    jButtonConnect = new javax.swing.JButton();
    jLabelAvailableServices = new javax.swing.JLabel();
    jComboBoxAvailableServices = new javax.swing.JComboBox<>();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    exitMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Book Library Client");
    setResizable(false);

    jLabelAvailableBooks.setText("Available Books");

    jButtonRefresh.setText("Refresh");
    jButtonRefresh.setEnabled(false);
    jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonRefreshActionPerformed(evt);
      }
    });

    jListAvailableBooks.setModel(getModel());
    jListAvailableBooks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        jListAvailableBooksValueChanged(evt);
      }
    });
    jScrollPane1.setViewportView(jListAvailableBooks);

    jLabelPrice.setText("Price");

    jLabelISBN.setText("ISBN");

    jLabelQuantity.setText("Quantity");

    jLabelCover.setText("Cover");

    jLabelCoverImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabelCoverImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    jLabelServiceLocation.setText("Service WSDL location");

    jTextFieldServiceLocation.setText("http://localhost:16419/03-WebAppBookStore/ServiceBookStore?WSDL");

    jButtonConnect.setText("Connect");
    jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonConnectActionPerformed(evt);
      }
    });

    jLabelAvailableServices.setText("Available Services");

    jComboBoxAvailableServices.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jComboBoxAvailableServicesItemStateChanged(evt);
      }
    });

    fileMenu.setMnemonic('f');
    fileMenu.setText("File");

    exitMenuItem.setMnemonic('x');
    exitMenuItem.setText("Exit");
    exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        exitMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    setJMenuBar(menuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jButtonConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
              .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addComponent(jLabelAvailableBooks)
                .addGap(18, 18, 18)
                .addComponent(jButtonRefresh)))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabelQuantity)
              .addComponent(jLabelPrice)
              .addComponent(jLabelISBN))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jTextFieldQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
              .addComponent(jTextFieldPrice)
              .addComponent(jTextFieldISBN))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabelCoverImage, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabelCover)))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabelServiceLocation)
              .addComponent(jLabelAvailableServices))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jTextFieldServiceLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
              .addComponent(jComboBoxAvailableServices, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelAvailableServices)
          .addComponent(jComboBoxAvailableServices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelServiceLocation)
          .addComponent(jTextFieldServiceLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButtonConnect)
        .addGap(30, 30, 30)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelAvailableBooks)
          .addComponent(jButtonRefresh)
          .addComponent(jLabelCover))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jLabelISBN)
              .addComponent(jTextFieldISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jLabelPrice)
              .addComponent(jTextFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jLabelQuantity)
              .addComponent(jTextFieldQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
          .addComponent(jLabelCoverImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
      System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

  private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
    handleInitService();
  }//GEN-LAST:event_jButtonConnectActionPerformed

  private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
    handleRefreshBookList();
  }//GEN-LAST:event_jButtonRefreshActionPerformed

  private void jListAvailableBooksValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListAvailableBooksValueChanged
    handleBookSelection();
  }//GEN-LAST:event_jListAvailableBooksValueChanged

  private void jComboBoxAvailableServicesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxAvailableServicesItemStateChanged
    handleLocationChange();
  }//GEN-LAST:event_jComboBoxAvailableServicesItemStateChanged

	private javax.swing.JMenuItem exitMenuItem;
	private javax.swing.JMenu fileMenu;
	private javax.swing.JButton jButtonConnect;
	private javax.swing.JButton jButtonRefresh;
	private javax.swing.JComboBox<String> jComboBoxAvailableServices;
	private javax.swing.JLabel jLabelAvailableBooks;
	private javax.swing.JLabel jLabelAvailableServices;
	private javax.swing.JLabel jLabelCover;
	private javax.swing.JLabel jLabelCoverImage;
	private javax.swing.JLabel jLabelISBN;
	private javax.swing.JLabel jLabelPrice;
	private javax.swing.JLabel jLabelQuantity;
	private javax.swing.JLabel jLabelServiceLocation;
	private javax.swing.JList<String> jListAvailableBooks;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextField jTextFieldISBN;
	private javax.swing.JTextField jTextFieldPrice;
	private javax.swing.JTextField jTextFieldQuantity;
	private javax.swing.JTextField jTextFieldServiceLocation;
	private javax.swing.JMenuBar menuBar;
}
